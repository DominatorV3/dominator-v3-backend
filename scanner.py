from token_security import get_token_score
from honeypot_detector import is_honeypot
from whitelist_utils import is_token_whitelisted
from dashboard_utils import update_dashboard_data
from stats_tracker import save_stats, generate_stats_graph
from wallet_utils import get_balance, send_sol
from telegram_utils import notify_tx_result
import random, time, os

def simulate_ia_scan(keypair, wallet_address, trade_percent, simulation=False):
    token = f"TOKEN{random.randint(100, 999)}"
    print(f"\nüéØ TOKEN IA D√âTECT√â : {token}")
    print("üß† Score IA : ‚úÖ CLEAN")
    print(f"üë§ Wallet cible : {wallet_address}")

    try:
        solde = get_balance(wallet_address)
        print(f"\nüí∞ Solde actuel : {solde:.6f} SOL")
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration solde : {e}")
        solde = 0.0

    montant = round(solde * trade_percent, 6)
    print(f"üí∏ Envoi : {montant} SOL")

    # Analyse IA
    score = get_token_score(token)
    print(f"üß† Analyse IA de s√©curit√© pour le token : {token}...")
    if score > 0.7:
        print(f"‚ùå Analyse IA : le token {token} a un score de risque √©lev√© ({score:.2f})")
        print("‚ö†Ô∏è Protection anti-rug IA activ√©e, token bloqu√©.")
        return

    print(f"‚úÖ Analyse IA : le token {token} a un score s√©curis√© ({score:.2f})")

    # Honeypot ?
    try:
        if is_honeypot(token):
            print(f"‚ùå Token {token} d√©tect√© comme honeypot.")
            print("‚ö†Ô∏è Protection honeypot activ√©e, token bloqu√©.")
            return
    except Exception as e:
        print(f"‚ùå Erreur analyse honeypot : {e}")
        return

    # Whitelist
    if is_token_whitelisted(token):
        print(f"‚úÖ Token {token} est dans la whitelist, autoris√©.")

    # Envoi
    try:
        if simulation:
            tx_hash = f"SIMU_TX_{int(time.time())}"
            print(f"üß™ SIMULATION : TX g√©n√©r√©e {tx_hash}")
        else:
            tx_hash = send_sol(keypair, wallet_address, montant)
            print(f"‚úÖ TX Confirm√©e : {tx_hash}")

        save_stats(token, montant, tx_hash)
        generate_stats_graph()
        update_dashboard_data(token, tx_hash, montant)
        notify_tx_result(token, tx_hash, montant)

    except Exception as e:
        print(f"‚ùå TX √©chou√©e : {e}")
